   if let Some(&SupportIdType::ImageId(back_logo)) =
            _result_map.get(&ResourceEnum::Sprite(Sprite::BACKCARD)) {
            let card_vec = dealt_iter.map(|x| {
                                              let (_image_id, _rect, _) =
                        in_game::get_card_widget_image_portrait(x.clone(), card_images, appdata);
                                              Image::new(_image_id).source_rectangle(_rect)
                                          })
                .collect::<Vec<Image>>();
            let player_draft_c =cards_dealt.clone();
            let give_out_vec = player.hand
                .iter()
                .enumerate()
                .map(move |(_index, x)| {
                    let mut _z = None;
                    for ref _d in player_draft_c.clone() {
                        if _d == x {
                            _z = Some(_index);
                        }
                    }
                    _z
                })
                .filter(|x| if let &Some(_) = x { true } else { false })
                .map(|x| x.unwrap())
                .collect::<Vec<usize>>();
                println!("give_out_vec {:?}",give_out_vec);
            let back_rect = Rect::from_corners([670.0, 70.0], [1130.0, 850.0]);
            if !Shuffle::new(card_vec, Image::new(back_logo).source_rectangle(back_rect))
                    .give_out(give_out_vec)
                    .bottom_left_of(ids.body)
                    .w(400.0)
                    .close_frame_rate(25)
                    .set(ids.shuffleview, ui) {
                *guistate = GuiState::Game(GameState::Spell);
            }
        }